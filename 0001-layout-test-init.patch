From 916a419265157a586b27a560137f6c7ff3c9c90f Mon Sep 17 00:00:00 2001
From: "tony.stark" <tony.stark@kakaocorp.com>
Date: Tue, 12 Nov 2019 16:31:56 +0900
Subject: [PATCH 1/3] layout test init

---
 lib/AlignTest.dart |  12 ++++
 lib/main.dart      | 145 +++++++++++++++++----------------------------
 2 files changed, 65 insertions(+), 92 deletions(-)
 create mode 100644 lib/AlignTest.dart

diff --git a/lib/AlignTest.dart b/lib/AlignTest.dart
new file mode 100644
index 0000000..4cf2c0b
--- /dev/null
+++ b/lib/AlignTest.dart
@@ -0,0 +1,12 @@
+import 'package:flutter/material.dart';
+
+class LayoutTest extends StatelessWidget {
+  @override
+  Widget build(BuildContext context) {
+    return Scaffold(
+      body: Container(
+        child: Center(child: Text("Layout Test")),
+      ),
+    );
+  }
+}
diff --git a/lib/main.dart b/lib/main.dart
index 5a7af45..6c8c897 100644
--- a/lib/main.dart
+++ b/lib/main.dart
@@ -1,111 +1,72 @@
 import 'package:flutter/material.dart';
 
-void main() => runApp(MyApp());
+import 'AlignTest.dart';
 
-class MyApp extends StatelessWidget {
-  // This widget is the root of your application.
-  @override
-  Widget build(BuildContext context) {
-    return MaterialApp(
-      title: 'Flutter Demo',
-      theme: ThemeData(
-        // This is the theme of your application.
-        //
-        // Try running your application with "flutter run". You'll see the
-        // application has a blue toolbar. Then, without quitting the app, try
-        // changing the primarySwatch below to Colors.green and then invoke
-        // "hot reload" (press "r" in the console where you ran "flutter run",
-        // or simply save your changes to "hot reload" in a Flutter IDE).
-        // Notice that the counter didn't reset back to zero; the application
-        // is not restarted.
-        primarySwatch: Colors.blue,
-      ),
-      home: MyHomePage(title: 'Flutter Demo Home Page'),
-    );
-  }
+void main() => runApp(new MyApp());
+//void main() => callFromMain();
+
+void callFromMain() {
+  print('test');
 }
 
-class MyHomePage extends StatefulWidget {
-  MyHomePage({Key key, this.title}) : super(key: key);
+class Demo {
+  final String title;
+  final String routeName;
+  final WidgetBuilder buildRoute;
 
-  // This widget is the home page of your application. It is stateful, meaning
-  // that it has a State object (defined below) that contains fields that affect
-  // how it looks.
+  Demo(this.title, this.routeName, this.buildRoute);
+}
 
-  // This class is the configuration for the state. It holds the values (in this
-  // case the title) provided by the parent (in this case the App widget) and
-  // used by the build method of the State. Fields in a Widget subclass are
-  // always marked "final".
+Demo canvasRecordDemo = Demo('Layout Test', '/Layout Test', (context) => LayoutTest());
 
-  final String title;
 
-  @override
-  _MyHomePageState createState() => _MyHomePageState();
-}
+final List<Demo> demos = List<Demo>()
+  ..add(canvasRecordDemo)
+;
 
-class _MyHomePageState extends State<MyHomePage> {
-  int _counter = 0;
+Map<String, WidgetBuilder> _buildRouterBuilder() {
+  return Map<String, WidgetBuilder>.fromIterable(
+    demos,
+    key: (demo) => demo.routeName,
+    value: (demo) => demo.buildRoute,
+  );
+}
 
-  void _incrementCounter() {
-    setState(() {
-      // This call to setState tells the Flutter framework that something has
-      // changed in this State, which causes it to rerun the build method below
-      // so that the display can reflect the updated values. If we changed
-      // _counter without calling setState(), then the build method would not be
-      // called again, and so nothing would appear to happen.
-      _counter++;
-    });
+class MyApp extends StatelessWidget {
+  @override
+  Widget build(BuildContext context) {
+    return MaterialApp(
+      title: 'Startup Name Generator',
+      theme: new ThemeData(
+        // Add the 3 lines from here...
+        primaryColor: Colors.blue,
+      ),
+      initialRoute: '/',
+      routes: _buildRouterBuilder(),
+//      routes: {'/first': (context) => FirstDemo()},
+      home: Home(),
+    );
+//        home: Scaffold(body: ListView(children: widgets)));
   }
+}
 
+class Home extends StatelessWidget {
   @override
   Widget build(BuildContext context) {
-    // This method is rerun every time setState is called, for instance as done
-    // by the _incrementCounter method above.
-    //
-    // The Flutter framework has been optimized to make rerunning build methods
-    // fast, so that you can just rebuild anything that needs updating rather
-    // than having to individually change instances of widgets.
+    List<Widget> widgets = demos.map((demo) {
+      return ListTile(
+        title: Text(demo.title, style: TextStyle(color: Colors.black),),
+        onTap: () {
+          print('goto ${demo.routeName}');
+//          Navigator.pushNamed(context, demo.routeName);
+          Navigator.pushNamed(context, demo.routeName);
+        },
+      );
+    }).toList();
+
     return Scaffold(
-      appBar: AppBar(
-        // Here we take the value from the MyHomePage object that was created by
-        // the App.build method, and use it to set our appbar title.
-        title: Text(widget.title),
-      ),
-      body: Center(
-        // Center is a layout widget. It takes a single child and positions it
-        // in the middle of the parent.
-        child: Column(
-          // Column is also a layout widget. It takes a list of children and
-          // arranges them vertically. By default, it sizes itself to fit its
-          // children horizontally, and tries to be as tall as its parent.
-          //
-          // Invoke "debug painting" (press "p" in the console, choose the
-          // "Toggle Debug Paint" action from the Flutter Inspector in Android
-          // Studio, or the "Toggle Debug Paint" command in Visual Studio Code)
-          // to see the wireframe for each widget.
-          //
-          // Column has various properties to control how it sizes itself and
-          // how it positions its children. Here we use mainAxisAlignment to
-          // center the children vertically; the main axis here is the vertical
-          // axis because Columns are vertical (the cross axis would be
-          // horizontal).
-          mainAxisAlignment: MainAxisAlignment.center,
-          children: <Widget>[
-            Text(
-              'You have pushed the button this many times:',
-            ),
-            Text(
-              '$_counter',
-              style: Theme.of(context).textTheme.display1,
-            ),
-          ],
-        ),
-      ),
-      floatingActionButton: FloatingActionButton(
-        onPressed: _incrementCounter,
-        tooltip: 'Increment',
-        child: Icon(Icons.add),
-      ), // This trailing comma makes auto-formatting nicer for build methods.
+      body: ListView(children: widgets),
     );
   }
 }
+
-- 
2.21.0 (Apple Git-122)

